<?php

namespace OpenEMR\Common\Utils;

/**
 * Utility class for parsing medical transcripts and summaries into structured blocks
 * for evidence linking and highlighting features.
 * 
 * This class handles the specific format generated by the AI Summary system:
 * - Transcripts: Lines starting with "- " (dash space) indicating conversation turns  
 * - Summaries: **Bold Headers** followed by content, with bullet points and subsections
 */
class TextUtil
{
    /**
     * Splits a transcript into an array of conversation turns based on speaker changes.
     * Handles the actual format: lines starting with "- " (dash space)
     *
     * @param string $transcript The full transcript text.
     * @return array An array of conversation turns.
     */
    public static function splitByConversationTurns(string $transcript): array
    {
        if (empty(trim($transcript))) {
            error_log("TextUtil: Empty transcript provided");
            return [];
        }
        
        // Normalize line endings
        $normalized = str_replace(["\r\n", "\r"], "\n", $transcript);
        
        // Remove common title lines if present (like "Doctor Visit Transcription")
        $normalized = preg_replace('/^.*(?:Transcription|Transcript|Visit Notes?).*\n/i', '', $normalized);
        
        // Split by lines starting with "- " (dash space), handling indentation
        $turns = preg_split('/^\s*-\s+/m', $normalized, -1, PREG_SPLIT_NO_EMPTY);
        
        // Clean up each turn and remove empty ones
        $cleanedTurns = [];
        foreach ($turns as $turn) {
            $turn = trim($turn);
            if (!empty($turn)) {
                $cleanedTurns[] = $turn;
            }
        }
        
        error_log("TextUtil: Split transcript into " . count($cleanedTurns) . " conversation turns");
        return $cleanedTurns;
    }

    /**
     * Splits a structured medical summary into logical blocks.
     * Handles the actual AI summary format:
     * - **Bold Headers** like "**History of Present Illness**"
     * - Content with sentence separators using " - "
     * - Subsections like "Substance Use:" and "Lifestyle Factors:"
     * - Blank lines separating major sections
     * 
     * @param string $summaryText The AI-generated summary text.
     * @return array An array of summary blocks.
     */
    public static function splitSummaryIntoBlocks(string $summaryText): array
    {
        if (empty(trim($summaryText))) {
            error_log("TextUtil: Empty summary provided");
            return [];
        }
        
        // Normalize line endings
        $summaryText = str_replace(["\r\n", "\r"], "\n", $summaryText);
        
        $blocks = [];
        
        // Split by blank lines to get major sections
        $sections = preg_split('/\n{2,}/', $summaryText, -1, PREG_SPLIT_NO_EMPTY);
        
        foreach ($sections as $section) {
            $section = trim($section);
            if (empty($section)) continue;
            
            // Check if this section starts with a **Bold Header**
            if (preg_match('/^\*\*([^*]+)\*\*(.*)$/s', $section, $matches)) {
                // Add the header as its own block
                $header = "**" . trim($matches[1]) . "**";
                $blocks[] = $header;
                
                // Process the content after the header
                $content = trim($matches[2]);
                if (!empty($content)) {
                    $blocks = array_merge($blocks, self::processSectionContent($content));
                }
            } else {
                // No bold header, treat as regular content
                $blocks = array_merge($blocks, self::processSectionContent($section));
            }
        }
        
        error_log("TextUtil: Split summary into " . count($blocks) . " blocks");
        return $blocks;
    }

    /**
     * Process content within a section, handling various formatting patterns.
     * 
     * @param string $content Section content to process
     * @return array Array of content blocks
     */
    private static function processSectionContent(string $content): array
    {
        $blocks = [];
        
        // Check for subsection headers like "Substance Use:" or "Problem 1:"
        if (preg_match_all('/^([A-Za-z0-9\s]+:)\s*(.*)$/m', $content, $matches, PREG_SET_ORDER)) {
            $lastPos = 0;
            
            foreach ($matches as $match) {
                $fullMatch = $match[0];
                $subsectionHeader = trim($match[1]);
                $subsectionContent = trim($match[2]);
                
                // Add any content before this subsection
                $pos = strpos($content, $fullMatch, $lastPos);
                if ($pos > $lastPos) {
                    $beforeContent = trim(substr($content, $lastPos, $pos - $lastPos));
                    if (!empty($beforeContent)) {
                        $blocks = array_merge($blocks, self::splitContentByBullets($beforeContent));
                    }
                }
                
                // Add the subsection header
                $blocks[] = $subsectionHeader;
                
                // Add the subsection content if not empty
                if (!empty($subsectionContent)) {
                    $blocks = array_merge($blocks, self::splitContentByBullets($subsectionContent));
                }
                
                $lastPos = $pos + strlen($fullMatch);
            }
            
            // Add any remaining content after the last subsection
            if ($lastPos < strlen($content)) {
                $remainingContent = trim(substr($content, $lastPos));
                if (!empty($remainingContent)) {
                    $blocks = array_merge($blocks, self::splitContentByBullets($remainingContent));
                }
            }
        } else {
            // No subsections, process as regular content
            $blocks = array_merge($blocks, self::splitContentByBullets($content));
        }
        
        return $blocks;
    }

    /**
     * Split content by bullet points (sentences starting with " - ")
     * 
     * @param string $content Content to split
     * @return array Array of content blocks
     */
    private static function splitContentByBullets(string $content): array
    {
        $blocks = [];
        
        // Check if content has bullet-style separators " - "
        if (strpos($content, ' - ') !== false) {
            // Split by " - " but keep the first part
            $parts = explode(' - ', $content);
            foreach ($parts as $part) {
                $part = trim($part);
                if (!empty($part)) {
                    $blocks[] = $part;
                }
            }
        } else {
            // No bullets, treat as single block if not empty
            if (!empty(trim($content))) {
                $blocks[] = trim($content);
            }
        }
        
        return $blocks;
    }

    /**
     * Validates the split data for medical summaries.
     * 
     * @param array $turns The conversation turns array
     * @param array $blocks The summary blocks array
     * @return bool True if data appears valid
     */
    public static function validateSplitConsistency(array $turns, array $blocks): bool
    {
        if (empty($turns)) {
            error_log("TextUtil Warning: No conversation turns found after splitting");
            return false;
        }
        
        if (empty($blocks)) {
            error_log("TextUtil Warning: No summary blocks found after splitting");
            return false;
        }
        
        // Count section headers (should have multiple for a proper medical summary)
        $sectionHeaders = 0;
        foreach ($blocks as $block) {
            if (preg_match('/^\*\*[^*]+\*\*$/', $block)) {
                $sectionHeaders++;
            }
        }
        
        if ($sectionHeaders < 3) {
            error_log("TextUtil Warning: Few section headers found ($sectionHeaders) - check summary format");
        }
        
        error_log("TextUtil: Validation complete - " . count($turns) . " turns, " . count($blocks) . " blocks, $sectionHeaders headers");
        
        return true;
    }

    /**
     * Debug helper to visualize how text was split.
     * 
     * @param array $items The array of split items
     * @param string $label Label for the output
     */
    public static function debugPrintSplits(array $items, string $label = "Items"): void
    {
        error_log("\n=== $label (" . count($items) . " items) ===");
        foreach ($items as $index => $item) {
            $preview = is_array($item) ? json_encode($item) : $item;
            $trimmed = substr($preview, 0, 80) . (strlen($preview) > 80 ? "..." : "");
            error_log("[$index]: " . $trimmed);
        }
        error_log("=== End $label ===\n");
    }
}